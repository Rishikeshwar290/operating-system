<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Deadlock Recovery System</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #e9ecef;
            margin: 0;
            padding: 20px;
            color: #343a40;
        }
        h1 {
            color: #007bff;
            text-align: center;
        }
        form {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-top: 10px;
            font-weight: bold;
        }
        input, textarea, select {
            width: 100%;
            padding: 12px;
            margin-top: 5px;
            border: 1px solid #ced4da;
            border-radius: 5px;
            font-size: 16px;
        }
        button {
            margin-top: 20px;
            padding: 12px 15px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #218838;
        }
        .result, .prevention {
            margin-top: 20px;
            padding: 15px;
            background: #d1ecf1;
            border-left: 6px solid #0c5460;
            border-radius: 5px;
        }
        #visualization {
            margin-top: 20px;
            display: none;
        }
    </style>
</head>
<body>
    <h1>Deadlock Recovery System</h1>
    
    <form id="deadlockForm">
        <label for="appName">Application Name:</label>
        <input type="text" id="appName" name="appName" required>

        <label for="threadCount">Number of Threads:</label>
        <input type="number" id="threadCount" name="threadCount" required>

        <label for="resources">Resources Allocated (comma-separated):</label>
        <textarea id="resources" name="resources" rows="4" required></textarea>

        <label for="waitFor">Wait-For Relationships (format: T1->T2, T2->T1):</label>
        <textarea id="waitFor" name="waitFor" rows="4" required></textarea>

        <label for="strategy">Resolution Strategy:</label>
        <select id="strategy" name="strategy" required>
            <option value="terminate">Thread Termination</option>
            <option value="preempt">Resource Preemption</option>
            <option value="priority">Priority Adjustments</option>
        </select>

        <button type="submit">Analyze Deadlock</button>
    </form>

    <div id="result" class="result" style="display:none;"></div>
    <div id="visualization" class="result"></div>
    <div id="prevention" class="prevention" style="display:none;"></div>

    <script>
        document.getElementById('deadlockForm').addEventListener('submit', function(event) {
            event.preventDefault();
            
            const appName = document.getElementById('appName').value;
            const threadCount = document.getElementById('threadCount').value;
            const resources = document.getElementById('resources').value;
            const waitFor = document.getElementById('waitFor').value;
            const strategy = document.getElementById('strategy').value;

            // Display the results
            const resultDiv = document.getElementById('result');
            resultDiv.style.display = 'block';
            resultDiv.innerHTML = `
                <h3>Analysis Result:</h3>
                <p><strong>Application Name:</strong> ${appName}</p>
                <p><strong>Number of Threads:</strong> ${threadCount}</p>
                <p><strong>Resources Allocated:</strong> ${resources}</p>
                <p><strong>Wait-For Relationships:</strong> ${waitFor}</p>
                <p><strong>Resolution Strategy:</strong> ${strategy}</p>
                <p>Further analysis can be done based on this data.</p>
            `;

            // Visualization of the recovery process
            const visualizationDiv = document.getElementById('visualization');
            visualizationDiv.style.display = 'block';
            visualizationDiv.innerHTML = createVisualization(waitFor, strategy);

            // Show best prevention strategy
            const preventionDiv = document.getElementById('prevention');
            preventionDiv.style.display = 'block';
            preventionDiv.innerHTML = suggestBestPrevention(threadCount);
        });

        function createVisualization(waitFor, strategy) {
            // Simple representation of the visualization
            return `
                <h3>Recovery Process Visualization:</h3>
                <p><strong>Wait-For Relationships:</strong> ${waitFor}</p>
                <p><strong>Selected Strategy:</strong> ${strategy}</p>
                <p>This section would visualize the recovery process based on the selected strategy.</p>
            `;
        }

        function suggestBestPrevention(threadCount) {
            if (threadCount > 1) {
                return `
                    <h3>Recommended Deadlock Prevention Strategy:</h3>
                    <p><strong>Hold and Wait:</strong> Require processes to request all necessary resources upfront, preventing any thread from holding resources while waiting for others. This is particularly effective in multi-threaded environments.</p>
                `;
            } else {
                return `
                    <h3>Recommended Deadlock Prevention Strategy:</h3>
                    <p><strong>Mutual Exclusion:</strong> Ensure that at least one resource must be held in a non-shareable mode, which is simpler when dealing with a single thread.</p>
                `;
            }
        }
    </script>
</body>
</html>
